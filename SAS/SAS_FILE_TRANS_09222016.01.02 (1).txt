
*--------------------------------------------------------------;
*                     PROGRAM SUMMARY                          ;
* PURPOSE - TRANSMISSIONS PROGRAM TO FIND THE LATEST SKIP FILE ;
* IN THE SKIP FILE DIRECTORY AND UPLOAD TO AN INTERNAL MAILBOX ;
* FOR EXTERNAL DELIVERY.                                       ; 
* VERSION - 1.2                                                ;
* AUTHOR - RICH KESSLER                                        ;
* CREATION DATE - 09.22.2016                                   ;
*--------------------------------------------------------------;



*-------------------------------------------------------------;
* LOCAL PROCESSING - INTIAL VAR CREATION AND LOG SETUP        ;
*-------------------------------------------------------------;

%Global logname success_subject success_body_msg1 fail_subject tolist toerror tocc1 fail_flag skipautoflag skipddaflag skipmortflag skipheflag skiprcvflag as_of_date;

%let env = DEV;
data _null_;
today = put(date(),yymmddn8.);
today1 = put(date(),yymmdd6.);
today2 = put(date(),yymmdd10.);
today3 = put(date(),mmddyy6.);
dttme = put(datetime(),datetime18.);
call symput('AS_OF_DATE',today);
call symput('AS_OF_DATE1',today1);
call symput('DATE_TIME',dttme);
call symput('YMD1',today2);
call symput('MDY1',today3);
run;

%let logfilename0 = %str(\\Network_Directory\SASLogs\SKIP_OUTGOING_FILES_TRANSMISSION_LOG_0_&AS_OF_DATE..txt);

%syslput as_of_date = &as_of_date.;

%include "\\Network_Directory\SASCode\SAS_Auto_Login_92.sas";

*-------------------------------------------------------------;
* REMOTE PROCESSING                                           ;
*-------------------------------------------------------------;

RSUBMIT;
options compress=yes mprint mlogic symbolgen;

%let logfilename1 = %str(\\Network_Directory\SASLogs\SKIP_OUT_FILE_TRANSMISSION_LOG_1_&AS_OF_DATE..txt);

proc printto log="&logfilename1." new;
run;

%let skipautoflag = 0;
%let skipddaflag  = 0; 
%let skipmortflag = 0; 
%let skipheflag   = 0; 
%let skiprcvflag  = 0;
%LET macpath = %str(\\Network_Directory\SASMacros);
%INCLUDE "&macpath.\error_checking.sas";
%INCLUDE "&macpath.\error_checking_batch_creation.sas";

%getdates;
%put &pyr.;
%put &cmoyr.;

LIBNAME DataIn "\\Network_Directory\skiptracing_list";
filename skip "\\Network_Directory\skiptracing_list";

/*READ INTERNAL NETWORK DIRECTORY FOR FILE LISTING*/

data temp;
    drop rc did i;
    did=dopen("skip");
    if did > 0 then do;
      do i=1 to dnum(did);
        name=dread(did,i);
        output;
        end;
      rc=dclose(did);
      end;
    else put 'Could not open directory';
  run;

data sql;
set temp;
 if(index(name,"&cmoyr.")) then file_status = "CRYR";
 if(index(name,"&pyr.")) then file_status = "PRYR";
run;

proc sql;
create table keeper as
select * from sql
where file_status = "CRYR";
quit;

proc sql noprint;
   select count(*) into :file_cnt from sql;
quit;
   
%put file_cnt = &file_cnt.;

/* DETERMINE IF FILE IS FROM THE CURRENT YEAR OR THE PREVIOUS YEAR(S)*/

%macro prev_yr_chk;
data sql;
set temp;
folder = index(name,&pyr.);
if(index(name,"&pyr.")) then file_status = "PRYR";
run;

proc sql;
create table keeper as
select * from sql
where file_status = "PRYR";
quit;
%mend;

%macro chk_year;
%if( 0 = &file_cnt. ) %then %do;
%prev_yr_chk;
%end;
%mend;

%chk_year;

proc sort data = keeper;
by descending name;
run;

data temp3;
set keeper;
if _n_ <=1;
run;

data temp4;
set temp3;
path1 = substr(name,1,8);
run;

/*KEEP THE LATEST FILE AND SET THE FILE PATH + FILE NAME TO THE PATH PARAM*/

Proc sql NOPRINT;
select path1 into :path
from temp4;
quit;

%let folderpath = \\Network_Directory\skiptracing_list\&path.;
filename fldpath "&folderpath.";

*-----------------------------------------------------------------------;
* BEGIN FINDING LATEST SKIP FILES                                       ;
*-----------------------------------------------------------------------;
%let skip_auto_path = &folderpath.;
filename skipauto "&skip_auto_path.";

/*READ NETWORK DIRECTORY FOR THE SKIP AUTO FILES*/

data skip_auto;
    drop rc did i;
    did=dopen("skipauto");
    if did > 0 then do;
      do i=1 to dnum(did);
        name=dread(did,i);
        output;
        end;
      rc=dclose(did);
      end;
    else put 'Could not open directory';
  run;

data skipauto;
set skip_auto;
 if(index(name,"skip.in.auto_dda.&cmoyr.")) then file_status = "CRYR";
 if(index(name,"skip.in.auto_dda.&pyr.")) then file_status = "PRYR";
 run;

proc sql;
create table skipauto2 as
select * from skipauto
where file_status = "CRYR";
quit;

proc sql noprint;
   select count(*) into :file_cnt from skipauto2;
quit;
   
%put file_cnt = &file_cnt.;

/* DETERMINE IF FILE IS FROM THE CURRENT YEAR OR THE PREVIOUS YEAR(S)*/

%macro prev_yr_chk;
data sql;
set skipauto;
folder = index(name,&pyr.);
if(index(name,"skip.in.auto_dda.&pyr.")) then file_status = "PRYR";
run;

proc sql;
create table keeper as
select * from sql
where file_status = "PRYR";
quit;
%mend;

%macro chk_year;
%if( 0 = &file_cnt. ) %then %do;
%prev_yr_chk;
Data skipauto2;
set keeper;
run;
%end;
%mend;

%chk_year;

proc sort data = skipauto2;
by descending name;
run;

data temp3;
set skipauto2;
if _n_ <=1;
run;

data temp4;
set temp3;
path1 = substr(name,1,30);
run;

/*KEEP THE LATEST FILE AND SET THE FILE PATH + FILE NAME TO THE PATH PARAM*/

Proc sql NOPRINT;
select path1 into :path_auto
from temp4;
quit;

%let skipfile = &folderpath.\&path_auto.;

*---------------------------------------------------------;
* CREATE SKIP AUTO BATCH FILE                             ;
*---------------------------------------------------------;
%macro auto_fcheck;                                 
  %if %sysfunc(fileexist(&skipfile.)) %then %do;  
        data _null_;
		file '\\Network_Directory\Batch_Files\SKIP_AUTO_OUT.bat';
		put "cd c:\";
		put "C:\CoreFTP\Coreftp.exe -s -O -site INTERNAL_MAILBOX -u &skipfile. -p /Inbox/";
		put "exit";
		run;
  		%let skipautoflag = 1;
		%put &skipautoflag.;
  %end; 
   %else
  		%put "&skipfile. Not Found";
 %mend;     
 %auto_fcheck;

*-----------------------------------------------------------------------;
* BEGIN FINDING LATEST SKIP DDA FILES                                   ;
*-----------------------------------------------------------------------;

%let skip_dda_path = &folderpath.;
filename skipdda "&skip_dda_path.";

/*READ INTERNAL NETWORK DIRECTORY FOR FILE LISTING*/

data skip_dda;
    drop rc did i;
    did=dopen("skipdda");
    if did > 0 then do;
      do i=1 to dnum(did);
        name=dread(did,i);
        output;
        end;
      rc=dclose(did);
      end;
    else put 'Could not open directory';
  run;

data skipdda;
set skip_dda;
 if(index(name,"skip.in.dda.&cmoyr.")) then file_status = "CRYR";
 if(index(name,"skip.in.dda.&pyr.")) then file_status = "PRYR";
run;

proc sql;
create table skipdda2 as
select * from skipdda
where file_status = "CRYR";
quit;

proc sql noprint;
   select count(*) into :file_cnt from skipdda2;
quit;
   
%put file_cnt = &file_cnt.;

/* DETERMINE IF FILE IS FROM THE CURRENT YEAR OR THE PREVIOUS YEAR(S)*/

%macro prev_yr_chk;
data sql;
set skipdda;
folder = index(name,&pyr.);
if(index(name,"skip.in.dda.&pyr.")) then file_status = "PRYR";
run;

proc sql;
create table keeper as
select * from sql
where file_status = "PRYR";
quit;
%mend;

%macro chk_year;
%if( 0 = &file_cnt. ) %then %do;
%prev_yr_chk;
Data skipdda2;
set keeper;
run;
%end;
%mend;

%chk_year;

proc sort data = skipdda2;
by descending name;
run;

data temp3;
set skipdda2;
if _n_ <=1;
run;

data temp4;
set temp3;
path1 = substr(name,1,29);
run;

/*KEEP THE LATEST FILE AND SET THE FILE PATH + FILE NAME TO THE PATH PARAM*/

Proc sql NOPRINT;
select path1 into :path_dda
from temp4;
quit;

%let skipdda = &folderpath.\&path_dda.;
%put &skipdda.;

*---------------------------------------------------------;
* CREATE SKIP DDA BATCH FILE                              ;
*---------------------------------------------------------;
%macro dda_fcheck;                                 
  %if %sysfunc(fileexist(&skipdda.)) %then %do;  
		data _null_;
		file '\\Network_Directory\Batch_Files\SKIP_DDA_OUT.bat';
		put "cd c:\";
		put "C:\CoreFTP\Coreftp.exe -s -O -site INTERNAL_MAILBOX -u &skipdda. -p /Inbox/";
		put "exit";
		run;    
		%let skipddaflag = 1; 
		%put &skipddaflag.;
  %end; 
   %else
  		%put "&skipdda. Not Found";
		
 %mend;     
 %dda_fcheck;


*-----------------------------------------------------------------------;
* BEGIN FINDING LATEST SKIP MORT FILES                                  ;
*-----------------------------------------------------------------------;
%let skip_mort_path = &folderpath.;
filename skipmort "&skip_mort_path.";

/*READ INTERNAL NETWORK DIRECTORY FOR FILE LISTING*/

data skipmort;
    drop rc did i;
    did=dopen("skipmort");
    if did > 0 then do;
      do i=1 to dnum(did);
        name=dread(did,i);
        output;
        end;
      rc=dclose(did);
      end;
    else put 'Could not open directory';
  run;

%put &cmoyr.;

data skip_mort;
set skipmort;
 if(index(name,"skip.in.mort.&cmoyr")) then file_status = "CRYR";
 if(index(name,"skip.in.mort.&pyr")) then file_status = "PRYR";
 run;

proc sql;
create table skipmort2 as
select * from skip_mort
where file_status = "CRYR";
quit;

proc sql noprint;
   select count(*) into :file_cnt from skipmort2;
quit;
   
%put file_cnt = &file_cnt.;


/* DETERMINE IF FILE IS FROM THE CURRENT YEAR OR THE PREVIOUS YEAR(S)*/

%macro prev_yr_chk;
data sql;
set skipmort;
folder = index(name,&pyr.);
if(index(name,"skip.in.mort.&pyr.")) then file_status = "PRYR";
run;

proc sql;
create table keeper as
select * from sql
where file_status = "PRYR";
quit;
%mend;

%macro chk_year;
%if( 0 = &file_cnt. ) %then %do;
%prev_yr_chk;
Data skipmort2;
set keeper;
run;
%end;
%mend;

%chk_year;

proc sort data = skipmort2;
by descending name;
run;

data temp3;
set skipmort2;
if _n_ <=1;
run;

data temp4;
set temp3;
path1 = substr(name,1,30);
run;

/*KEEP THE LATEST FILE AND SET THE FILE PATH + FILE NAME TO THE PATH PARAM*/

Proc sql NOPRINT;
select path1 into :path_mort
from temp4;
quit;

%let skipmort = &folderpath.\&path_mort.;

*---------------------------------------------------------;
* CREATE SKIP MORT BATCH FILE                             ;
*---------------------------------------------------------;
%macro mort_fcheck;                                 
  %if %sysfunc(fileexist(&skipmort.)) %then %do;  
		data _null_;
		file '\\Network_Directory\Batch_Files\SKIP_MORT_OUT.bat';
		put "cd c:\";
		put "C:\CoreFTP\Coreftp.exe -s -O -site INTERNAL_MAILBOX -u &skipmort. -p /Inbox/";
		put "exit";
		run;       
		%let skipmortflag = 1; 
		%put &skipmortflag.;
  %end; 
   %else
  		%put "&skipmort. Not Found";
  %mend;     
 %mort_fcheck;

*-----------------------------------------------------------------------;
* BEGIN FINDING LATEST SKIP HE FILES                                  ;
*-----------------------------------------------------------------------;
%let skip_he_path = &folderpath.;
filename skiphe "&skip_he_path.";

/*READ INTERNAL NETWORK DIRECTORY FOR FILE LISTING*/

data skiphe;
    drop rc did i;
    did=dopen("skiphe");
    if did > 0 then do;
      do i=1 to dnum(did);
        name=dread(did,i);
        output;
        end;
      rc=dclose(did);
      end;
    else put 'Could not open directory';
  run;

data skip_he;
set skiphe;
 if(index(name,"skip.in.he.&cmoyr.")) then file_status = "CRYR";
 if(index(name,"skip.in.he.&pyr.")) then file_status = "PRYR";
run;

proc sql;
create table skiphe2 as
select * from skip_he
where file_status = "CRYR";
quit;

proc sql noprint;
   select count(*) into :file_cnt from skiphe2;
quit;
   
%put file_cnt = &file_cnt.;


/* DETERMINE IF FILE IS FROM THE CURRENT YEAR OR THE PREVIOUS YEAR(S)*/

%macro prev_yr_chk;
data sql;
set skiphe;
folder = index(name,&pyr.);
if(index(name,"skip.in.he.&pyr.")) then file_status = "PRYR";
run;

proc sql;
create table keeper as
select * from sql
where file_status = "PRYR";
quit;
%mend;

%macro chk_year;
%if( 0 = &file_cnt. ) %then %do;
%prev_yr_chk;
Data skiphe2;
set keeper;
run;
%end;
%mend;

%chk_year;

proc sort data = skiphe2;
by descending name;
run;

data temp3;
set skiphe2;
if _n_ <=1;
run;

data temp4;
set temp3;
path1 = substr(name,1,29);
run;

/*KEEP THE LATEST FILE AND SET THE FILE PATH + FILE NAME TO THE PATH PARAM*/

Proc sql NOPRINT;
select path1 into :path_he
from temp4;
quit;

%let skiphe = &folderpath.\&path_he.;

*-----------------------------------------------------------------------;
* CREATE SKIP MORT BATCH FILE                                           ;
*-----------------------------------------------------------------------;
%macro he_fcheck;                                 
  %if %sysfunc(fileexist(&skiphe.)) %then %do;  
		data _null_;
		file '\\Network_Directory\Batch_Files\SKIP_HE_OUT.bat';
		put "cd c:\";
		put "C:\CoreFTP\Coreftp.exe -s -O -site INTERNAL_MAILBOX -u &skiphe. -p /Inbox/";
		put "exit";
		run;       
		%let skipheflag = 1; 
		%put &skipheflag.;
  %end; 
   %else
  		%put "&skiphe. Not Found";
		
 %mend;     
 %he_fcheck;

*-----------------------------------------------------------------------;
* BEGIN FINDING LATEST SKIP RECOVERY FILES                              ;
*-----------------------------------------------------------------------;
%let skip_rcv_path = &folderpath.;
filename skiprcv "&skip_rcv_path.";

/*READ INTERNAL NETWORK DIRECTORY FOR FILE LISTING*/

data skiprcv;
    drop rc did i;
    did=dopen("skiprcv");
    if did > 0 then do;
      do i=1 to dnum(did);
        name=dread(did,i);
        output;
        end;
      rc=dclose(did);
      end;
    else put 'Could not open directory';
  run;

data skip_rcv;
set skiprcv;
 if(index(name,"skip.in.recovery.&cmoyr.")) then file_status = "CRYR";
 if(index(name,"skip.in.recovery.&pyr.")) then file_status = "PRYR";
run;

proc sql;
create table skiprcv2 as
select * from skip_rcv
where file_status = "CRYR";
quit;

proc sql noprint;
   select count(*) into :file_cnt from skiprcv2;
quit;
   
%put file_cnt = &file_cnt.;

/* DETERMINE IF FILE IS FROM THE CURRENT YEAR OR THE PREVIOUS YEAR(S)*/

%macro prev_yr_chk;
data sql;
set skiprcv;
folder = index(name,&pyr.);
if(index(name,"skip.in.recovery.&pyr.")) then file_status = "PRYR";
run;

proc sql;
create table keeper as
select * from sql
where file_status = "PRYR";
quit;
%mend;

%macro chk_year;
%if( 0 = &file_cnt. ) %then %do;
%prev_yr_chk;
Data skiprcv2;
set keeper;
run;
%end;
%mend;

%chk_year;

proc sort data = skiprcv2;
by descending name;
run;

data temp3;
set skiprcv2;
if _n_ <=1;
run;

data temp4;
set temp3;
path1 = substr(name,1,34);
run;

/*KEEP THE LATEST FILE AND SET THE FILE PATH + FILE NAME TO THE PATH PARAM*/

Proc sql NOPRINT;
select path1 into :path_rcv
from temp4;
quit;

/*BEGIN IMPORTING THE LATEST FILE*/
%let skiprcv = &folderpath.\&path_rcv.;

*---------------------------------------------------------;
* CREATE SKIP RECOVERY BATCH FILE                         ;
*---------------------------------------------------------;
%macro rcv_fcheck;                                 
  %if %sysfunc(fileexist(&skiprcv.)) %then %do;  
		data _null_;
		file '\\Network_Directory\Batch_Files\SKIP_RECOVERY_OUT.bat';
		put "cd c:\";
		put "C:\CoreFTP\Coreftp.exe -s -O -site INTERNAL_MAILBOX -u &skiprcv. -p /Inbox/";
		put "exit";
		run;      
		%let skiprcvflag = 1;
		%put &skiprcvflag.;
  %end; 
   %else
  		%put "&skiprcv. Not Found";
 %mend;     
 %rcv_fcheck;

%let batch_path = \\Network_Directory\Batch_Files;

%put &skipautoflag.;
%put &skipddaflag.;
%put &skipmortflag.;
%put &skipheflag.;
%put &skiprcvflag.;

%sysrput skipautoflag = &skipautoflag.;
%sysrput skipddaflag = &skipddaflag.;
%sysrput skipmortflag = &skipmortflag.;
%sysrput skipheflag = &skipheflag.;
%sysrput skiprcvflag = &skiprcvflag.;
%sysrput batch_path = &batch_path.;

proc printto; run;
ENDRSUBMIT;

rsubmit;
/* SETUP FAILED TRANSMISSIONS EMAIL ALERT AND ERROR CHECKING MACRO*/
%put &logfilename1.;
%let tolist="richard.kessler@email.com";
%let toerror="richard.kessler@email.com";
%let tocc1="richard.kessler@email.com";
%let fail_subject = Outgoing Skip Batch Files Creation Results;
%LET macpath = %str(\\Network_Directory\SASMacros);
%INCLUDE "&macpath.\skip_out_err_chkg_batch.sas";
%skip_out_err_chkg_batch(&logfilename1., &fail_subject., &tolist., &toerror., &tocc1.);
endrsubmit;

proc printto log="&logfilename0." new;
run;
*-----------------------------------------------------------;
* CHECK IF FILES EXIST BEFORE SENDING TO INTERNAL MAILBOX   ;
*-----------------------------------------------------------;
%macro auto_sysexec_output;
 %if ( 1 = &skipautoflag.) %then %do;
   %SYSEXEC "&batch_path.\SKIP_AUTO_OUT.bat";
 %end;
%mend;

%macro dda_sysexec_output;
 %if ( 1 = &skipddaflag.) %then %do;
   %SYSEXEC "&batch_path.\SKIP_DDA_OUT.bat";
 %end;
%mend;

%macro mort_sysexec_output;
 %if ( 1 = &skipmortflag.) %then %do;
   %SYSEXEC "&batch_path.\SKIP_MORT_OUT.bat";
 %end;
%mend;

%macro he_sysexec_output;
 %if ( 1 = &skipheflag.) %then %do;
   %SYSEXEC "&batch_path.\SKIP_HE_OUT.bat";
 %end;
%mend;

%macro rcv_sysexec_output;
 %if ( 1 = &skiprcvflag.) %then %do;
   %SYSEXEC "&batch_path.\SKIP_RECOVERY_OUT.bat";
 %end;
%mend;

%auto_sysexec_output;
%dda_sysexec_output;
%mort_sysexec_output;
%he_sysexec_output;
%rcv_sysexec_output;

/*DECLARE FLAG COUNTS FOR OUTPUT VERIFICATION*/
Data flag_counts;
if &skipautoflag. = 1 then flag_count +1;
if &skipddaflag. = 1 then flag_count +1;
if &skipmortflag. = 1 then flag_count +1;
if &skipheflag. = 1 then flag_count +1;
if &skiprcvflag. = 1 then flag_count +1;
run;

/*SETUP FLAG VARS FOR EMAIL OUTPUT*/
Data flag_status;
length auto_flag_status $7 dda_flag_status $7 mort_flag_status $7 he_flag_status $7 rcv_flag_status $7;
if &skipautoflag. = 1 then auto_flag_status = "SENT";
if &skipddaflag. = 1 then dda_flag_status = "SENT";
if &skipmortflag. = 1 then mort_flag_status = "SENT";
if &skipheflag. = 1 then he_flag_status = "SENT";
if &skiprcvflag. = 1 then rcv_flag_status = "SENT";
if &skipautoflag. = 0 then auto_flag_status = "MISSING";
if &skipddaflag. = 0 then dda_flag_status = "MISSING";
if &skipmortflag. = 0 then mort_flag_status = "MISSING";
if &skipheflag. = 0 then he_flag_status = "MISSING";
if &skiprcvflag. = 0 then rcv_flag_status = "MISSING";
call symput('auto_flag_status',auto_flag_status);
call symput('dda_flag_status',dda_flag_status);
call symput('mort_flag_status',mort_flag_status);
call symput('he_flag_status',he_flag_status);
call symput('rcv_flag_status',rcv_flag_status);
run;

/*WRITE FLAG STATUS TO LOG*/
%put &auto_flag_status.;
%put &dda_flag_status.;
%put &mort_flag_status.;
%put &he_flag_status.;
%put &rcv_flag_status.;

proc sql noprint;
select flag_count into :fc
from flag_counts;
quit;

%syslput fc = &fc.;
%syslput logfilename0 = &logfilename0.;
%syslput auto_flag_status = &auto_flag_status.;
%syslput dda_flag_status = &dda_flag_status.;
%syslput mort_flag_status = &mort_flag_status.;
%syslput he_flag_status = &he_flag_status.;
%syslput rcv_flag_status = &rcv_flag_status.;
%syslput skipautoflag = &skipautoflag.;
%syslput skipddaflag = &skipddaflag.;
%syslput skipmortflag = &skipmortflag.;
%syslput skipheflag = &skipheflag.;
%syslput skiprcvflag = &skiprcvflag.;

/*EMAIL REPORT TO STAKEHOLDERS*/

data output_email;
length auto_fs dda_fs mort_fs he_fs rcv_fs $35;
success_message = "&success_body_msg1.";
fc = "&fc.";
if &skipautoflag. = 1 then auto_fs = "SENT";
if &skipddaflag. = 1 then dda_fs = "SENT";
if &skipmortflag. = 1 then mort_fs = "SENT";
if &skipheflag. = 1 then he_fs = "SENT";
if &skiprcvflag. = 1 then rcv_fs = "SENT";
if &skipautoflag. = 0 then auto_fs = "MISSING";
if &skipddaflag. = 0 then dda_fs = "MISSING";
if &skipmortflag. = 0 then mort_fs = "MISSING";
if &skipheflag. = 0 then he_fs = "MISSING";
if &skiprcvflag. = 0 then rcv_fs = "MISSING";
call symput('auto_fs',auto_fs);
call symput('dda_fs',dda_fs);
call symput('mort_fs',mort_fs);
call symput('he_fs',he_fs);
call symput('rcv_fs',rcv_fs);
run;

/*WRITE COUNTS AND STATUS TO LOG*/
%put &success_body_msg1.;
%put &fc.;
%put &auto_fs.;
%put &dda_fs.;
%put &mort_fs.;
%put &he_fs.;
%put &rcv_fs.;
%put &fc.;

proc contents data = work.success;
run;

/*SEND EMAIL NOTIFICATION*/

   FILENAME outbox EMAIL type='text/html'
        to=(&tolist.)
		subject="&success_subject."
		attach="&logname0.";
		ods html body=outbox rs=none style=PRINTER;

		TITLE;
        TITLE2 "Run date: &SYSDATE.";
		proc report data=output_email  NOWD 
		STYLE(REPORT)={BACKGROUND=WHITE BORDERWIDTH=1 RULES=ROWS CELLSPACING=2 FONT_SIZE=14PX CELLPADDING=3.5PT FOREGROUND=BLACK}
        STYLE(HEADER)={BACKGROUND=#1B2330  RULES=ROWS FOREGROUND=WHITE};
        COLUMN success_message fc auto_fs dda_fs mort_fs he_fs rcv_fs;
        DEFINE success_message / "INTERNAL SKIP FILES TO MAILBOX TRANSMISSION CONFIRMATION" FLOW 
        STYLE(COLUMN)={RULES=ROWS  FOREGROUND=BLACK CELLHEIGHT=.01IN JUST=C};
		DEFINE fc / "FILES UPLOADED" FLOW 
        STYLE(COLUMN)={RULES=ROWS FOREGROUND=BLACK CELLHEIGHT=.01IN JUST=C};
		DEFINE auto_fs / "AUTO DDA STATUS" WIDTH=35
        STYLE(COLUMN)={RULES=ROWS  FOREGROUND=BLACK CELLHEIGHT=.01IN JUST=C};
		DEFINE dda_fs / "DDA STATUS" WIDTH=35
        STYLE(COLUMN)={RULES=ROWS  FOREGROUND=BLACK CELLHEIGHT=.01IN JUST=C};
		DEFINE mort_fs / "MORTGAGE STATUS" WIDTH=35 
        STYLE(COLUMN)={RULES=ROWS  FOREGROUND=BLACK CELLHEIGHT=.01IN JUST=C};
		DEFINE he_fs / "HOME EQUITY STATUS" WIDTH=35 
        STYLE(COLUMN)={RULES=ROWS  FOREGROUND=BLACK CELLHEIGHT=.01IN JUST=C};
	    DEFINE rcv_fs / "RECOVERY STATUS" WIDTH=35 
        STYLE(COLUMN)={RULES=ROWS  FOREGROUND=BLACK CELLHEIGHT=.01IN JUST=C};
		COMPUTE fc;
            IF fc EQ "5" THEN
                CALL DEFINE (_COL_,'STYLE','STYLE={BACKGROUND=#11A635}');
	    ENDCOMP;
		COMPUTE auto_fs;
       	    IF auto_fs EQ 'SENT' THEN
                CALL DEFINE (_COL_,'STYLE','STYLE={BACKGROUND=#11A635}');
		    IF auto_fs EQ 'MISSING' THEN 
                CALL DEFINE (_COL_,"STYLE","STYLE=[BACKGROUND=ORANGE]");
		ENDCOMP;
		COMPUTE dda_fs;
			IF dda_fs EQ 'SENT' THEN
                CALL DEFINE (_COL_,'STYLE','STYLE={BACKGROUND=#11A635}');
		    IF dda_fs EQ 'MISSING' THEN
                CALL DEFINE (_COL_,'STYLE','STYLE={BACKGROUND=ORANGE}');
		ENDCOMP;
		COMPUTE mort_fs;
			IF mort_fs EQ 'SENT' THEN
                CALL DEFINE (_COL_,'STYLE','STYLE={BACKGROUND=#11A635}');
		    IF mort_fs EQ 'MISSING' THEN
                CALL DEFINE (_COL_,'STYLE','STYLE={BACKGROUND=ORANGE}');
		ENDCOMP;
		COMPUTE he_fs;
			IF he_fs EQ 'SENT' THEN
                CALL DEFINE (_COL_,'STYLE','STYLE={BACKGROUND=#11A635}');
		    IF he_fs EQ 'MISSING' THEN
                CALL DEFINE (_COL_,'STYLE','STYLE={BACKGROUND=ORANGE}');
		ENDCOMP;
		COMPUTE rcv_fs;
			IF rcv_fs EQ 'SENT' THEN
                CALL DEFINE (_COL_,'STYLE','STYLE={BACKGROUND=#11A635}');
		    IF rcv_fs EQ 'MISSING' THEN
                CALL DEFINE (_COL_,'STYLE','STYLE={BACKGROUND=ORANGE}');
		ENDCOMP;
        run;
	ods html close;


proc printto; run;
